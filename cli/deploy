source "$(dirname "${BASH_SOURCE[0]}")/utils/deployment"
source "$(dirname "${BASH_SOURCE[0]}")/utils/package"
source "$(dirname "${BASH_SOURCE[0]}")/containerize"
source "$(dirname "${BASH_SOURCE[0]}")/smoke"

deploy() {
    local loc
    local approve
    parse_environment_args "$@" || return 1
    loc=$(parse_local_arg "$@") || return 1
    approve=$(parse_approve_arg "$@") || return 1

    local version=$(get_version folio)

    if [[ "$loc" = "false" ]]; then
        containerize --push
        if [[ $? -ne 0 ]]; then
            echo "Failed to build and push Docker image."
            return 1
        fi

        echo
        echo "Initializing Terraform..."

        terraform -chdir=infra init -reconfigure \
            -backend-config="prefix=$ENVIRONMENT"
        if [[ $? -ne 0 ]]; then
            echo "Failed to initialize Terraform."
            return 1
        fi

        echo "Deploying to production environment..."
        terraform -chdir=infra plan -out=tfplan \
            -var "environment=$ENVIRONMENT" \
            -var "app_version=$version" \
            -var "namespace=$FOLIO_APP_ACCOUNT" \
            -var "domain=$FOLIO_APP_DOMAIN" \
            -var "dns_zone=$FOLIO_CF_DNS_ZONE" \
            -var "ssh_port=$FOLIO_SSH_PORT" \
            -var "acme_email=$FOLIO_ACME_EMAIL" \
            -var "ssh_key_id=$FOLIO_SSH_KEY_ID" \
            -var "ssh_public_key_file=$FOLIO_PUBLIC_KEY_FILE" \
            -var "cf_token=$FOLIO_CF_TOKEN" \
            -var "do_token=$FOLIO_DO_TOKEN"
        if [[ $? -ne 0 ]]; then
            echo "Failed to create Terraform plan."
            return 1
        fi

        if [[ "$approve" != "true" ]]; then
            echo "Deploy $ENVIRONMENT configuration to $FOLIO_APP_DOMAIN? (y/n)"
            read -r response
            if [[ ! "$response" =~ ^[Yy]$ ]]; then
                echo
                echo "Deployment aborted."
                return 0
            fi
        fi

        echo "Applying Terraform plan..."
        terraform -chdir=infra apply tfplan
        if [[ $? -ne 0 ]]; then
            echo "Failed to apply Terraform plan."
            return 1
        fi

        echo
        echo "Application is running at https://$FOLIO_APP_DOMAIN"

        echo
        smoke --domain "$FOLIO_APP_DOMAIN" || return 1

        echo
        echo "Deployment of $ENVIRONMENT completed successfully."
        return 0
    fi

    containerize || return 1

    if docker image inspect "$FOLIO_APP_REPO:$version" > /dev/null 2>&1; then
        docker run -d \
            --name folio \
            -p 3000:3000 \
            "$FOLIO_APP_REPO:$version"
    else
        echo "Docker image '$FOLIO_APP_REPO:$version' not found locally."
        echo "Pulling the v$version image from GitHub Container Registry..."
        if [[ -z "$FOLIO_APP_ACCOUNT" ]]; then
            echo "Error: GitHub namespace is required to retrieve image."
            usage
            return 1
        fi
        docker pull "ghcr.io/$FOLIO_APP_ACCOUNT/$FOLIO_APP_REPO:$version"
        if [[ $? -ne 0 ]]; then
            echo "Failed to pull Docker image from GitHub Container Registry."
            echo "Build the image locally with 'containerize' script."
            return 1
        fi
        docker run -d \
            --name folio \
            -p 3000:3000 \
            "ghcr.io/$FOLIO_APP_ACCOUNT/$FOLIO_APP_REPO:$version"
    fi
    if [[ $? -ne 0 ]]; then
        echo "Failed to start the application."
        return 1
    fi
    echo "Application is running on http://localhost:3000"

    echo
    smoke --insecure --domain "localhost:3000" || return 1
}
