source "$(dirname "${BASH_SOURCE[0]}")/utils/deployment"
source "$(dirname "${BASH_SOURCE[0]}")/utils/package"
source "$(dirname "${BASH_SOURCE[0]}")/containerize"
source "$(dirname "${BASH_SOURCE[0]}")/smoke"
source "$(dirname "${BASH_SOURCE[0]}")/status"

deploy() {
    local loc
    local approve
    local set_status
    local force
    local verbose

    verbose=$(parse_flag "--verbose" "$@") || return 1
    if [[ "$verbose" == "true" ]]; then echo "Deploying application."; fi
    parse_environment_args "$@" || return 1

    loc=$(parse_flag "--local" "$@") || return 1
    approve=$(parse_flag "--approve" "$@") || return 1
    set_status=$(parse_flag "--set-status" "$@") || return 1
    force=$(parse_flag "--force|-f" "$@") || return 1

    local version=$(get_version folio)

    if [[ "$verbose" == "true" ]]; then
        echo "Deploying version $version."
        if [[ "$approve" == "true" ]]; then echo "Auto-approve enabled."; fi
        if [[ "$set_status" == "true" ]]; then
            if [[ "$force" == "true" ]]; then
                echo "Force status updates enabled."
            else
                echo "Status updates enabled."
            fi
        else echo "Status updates disabled."; fi
    fi

    if [[ "$set_status" == "true" ]]; then
        local status=$(status --self --context "cd/$FOLIO_CICD_REPO")
        if [[ $? -ne 0 ]]; then
            echo "Failed to retrieve current commit status."
            return 1
        fi

        if [[ "$status" != "none" ]]; then
            echo "Deployment already in progress."
            if [[ "$force" != "true" ]]; then
                echo "Aborting deployment to avoid concurrent deployments."
                return 1
            fi
            echo "Forcing deployment despite existing status."
        fi
    fi

    update_status() {
        if [[ "$set_status" == "false" ]]; then return 0; fi
        local deployment_msg="Deployment of $ENVIRONMENT to $FOLIO_APP_DOMAIN"
        status set --self "$1" \
            --context "cd/$FOLIO_CICD_REPO" \
            --description "$deployment_msg $2."
        if [[ $? -ne 0 ]]; then
            echo "Failed to update commit status: $1."
            return 1
        fi
        echo "Commit status updated to: $1."
    }

    update_status "pending" "started" || return 1

    if [[ "$loc" = "false" ]]; then
        containerize --push
        if [[ $? -ne 0 ]]; then
            echo "Failed to build and push Docker image."
            update_status "failure" "failed to build and push image"
            return 1
        fi

        echo
        echo "Initializing Terraform..."

        terraform -chdir=infra init -reconfigure \
            -backend-config="prefix=$ENVIRONMENT"
        if [[ $? -ne 0 ]]; then
            echo "Failed to initialize Terraform."
            update_status "failure" "failed to initialize environment"
            return 1
        fi

        echo "Deploying to production environment..."
        terraform -chdir=infra plan -out=tfplan \
            -var "environment=$ENVIRONMENT" \
            -var "app_version=$version" \
            -var "namespace=$FOLIO_APP_ACCOUNT" \
            -var "domain=$FOLIO_APP_DOMAIN" \
            -var "dns_zone=$FOLIO_CF_DNS_ZONE" \
            -var "ssh_port=$FOLIO_SSH_PORT" \
            -var "acme_email=$FOLIO_ACME_EMAIL" \
            -var "ssh_key_id=$FOLIO_SSH_KEY_ID" \
            -var "ssh_public_key_file=$FOLIO_PUBLIC_KEY_FILE" \
            -var "cf_token=$FOLIO_CF_TOKEN" \
            -var "do_token=$FOLIO_DO_TOKEN"
        if [[ $? -ne 0 ]]; then
            echo "Failed to create Terraform plan."
            update_status "failure" "failed to resolve required resources"
            return 1
        fi

        if [[ "$approve" != "true" ]]; then
            echo "Deploy $ENVIRONMENT configuration to $FOLIO_APP_DOMAIN? (y/n)"
            read -r response
            if [[ ! "$response" =~ ^[Yy]$ ]]; then
                echo
                echo "Deployment aborted."
                update_status "pending" "aborted by user"
                return 0
            fi
        fi

        echo "Applying Terraform plan..."
        terraform -chdir=infra apply tfplan
        if [[ $? -ne 0 ]]; then
            echo "Failed to apply Terraform plan."
            update_status "failure" "failed to provision resources"
            return 1
        fi

        echo
        echo "Application is running at https://$FOLIO_APP_DOMAIN"

        echo
        smoke --domain "$FOLIO_APP_DOMAIN"
        if [[ $? -ne 0 ]]; then
            update_status "failure" "failed smoke test"
            return 1
        fi

        echo
        echo "Deployment of $ENVIRONMENT completed successfully."
        update_status "success" "deployed successfully" || return 1
        return 0
    fi

    containerize || return 1

    if docker image inspect "$FOLIO_APP_REPO:$version" > /dev/null 2>&1; then
        docker run -d \
            --name folio \
            -p 3000:3000 \
            "$FOLIO_APP_REPO:$version"
    else
        echo "Docker image '$FOLIO_APP_REPO:$version' not found locally."
        echo "Pulling the v$version image from GitHub Container Registry..."
        if [[ -z "$FOLIO_APP_ACCOUNT" ]]; then
            echo "Error: GitHub namespace is required to retrieve image."
            usage
            return 1
        fi
        docker pull "ghcr.io/$FOLIO_APP_ACCOUNT/$FOLIO_APP_REPO:$version"
        if [[ $? -ne 0 ]]; then
            echo "Failed to pull Docker image from GitHub Container Registry."
            echo "Build the image locally with 'containerize' script."
            return 1
        fi
        docker run -d \
            --name folio \
            -p 3000:3000 \
            "ghcr.io/$FOLIO_APP_ACCOUNT/$FOLIO_APP_REPO:$version"
    fi
    if [[ $? -ne 0 ]]; then
        echo "Failed to start the application."
        return 1
    fi
    echo "Application is running on http://localhost:3000"

    echo
    smoke --insecure --domain "localhost:3000" || return 1
}
