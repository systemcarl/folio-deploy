source "$(dirname "${BASH_SOURCE[0]}")/utils/environment"
source "$(dirname "${BASH_SOURCE[0]}")/utils/package"

containerize() {
    usage() {
        echo "Usage: $0 [options]"
        echo "Options:"
        echo "  --push              Push image to GitHub Container Registry."
        echo "  --rebuild           Force rebuild of the Docker image."
        echo "  --ghpr-token        Specify the GitHub Package Registry token."
        echo "  --help, -h          Show this help message."
        echo "Environment Variables:"
        echo "  FOLIO_GHPR_TOKEN    GitHub Package Registry token."
    }

    load_env

    local push=false
    local rebuild=false
    while [[ "$1" != "" ]]; do
        case $1 in
            --help | -h ) usage; return 0;;
            --push ) push=true;;
            --rebuild ) rebuild=true;;
            --ghpr-token ) FOLIO_GHPR_TOKEN="$2"; shift;;
            * ) echo "Invalid option: $1"; return 1;;
        esac
        shift
    done

    local version=$(get_version folio)
    local tag_prefix="$FOLIO_APP_REPO"
    local source="https://github.com/$FOLIO_APP_ACCOUNT/$FOLIO_APP_REPO"

    local remote_image="ghcr.io/$FOLIO_APP_ACCOUNT/$tag_prefix"
    if [[ "$push" = "true" ]]; then
        tag_prefix="$remote_image"
    fi

    if [[ -n "$FOLIO_GHPR_TOKEN" ]]; then
        echo "Authenticating Docker to GitHub Container Registry..."
        echo "$FOLIO_GHPR_TOKEN" | docker login ghcr.io \
            --username "$FOLIO_APP_ACCOUNT" --password-stdin
        if [[ $? -ne 0 ]]; then
            echo "Failed to log in to GitHub Container Registry."
            return 1
        fi
        echo "Logged in to GitHub Container Registry successfully."
    fi

    if [[ "$rebuild" == "false" ]]; then
        if [[ "$push" == "false" ]]; then
            echo "Checking for local Docker image '$tag_prefix:$version'..."
            docker image inspect "$tag_prefix:$version" > /dev/null 2>&1
            if [[ $? -eq 0 ]]; then
                echo "Docker image '$tag_prefix:$version' already exists."
                return 0
            fi
        fi
        echo "Checking for remote Docker image '$remote_image:$version'..."
        docker pull "$remote_image:$version" > /dev/null 2>&1
        if [[ $? -eq 0 ]]; then
            echo "Docker image '$remote_image:$version' already exists."
            return 0
        fi
        echo "No existing Docker image found. Proceeding with build."
    else
        echo "Rebuilding Docker image."
    fi

    echo
    echo "Building SvelteKit application..."
    echo "Version: $version"

    if [[ ! -d folio ]]; then
        echo "Error: 'folio' directory does not exist."
        return 1
    fi
    cd folio

    npm install
    if [[ $? -ne 0 ]]; then
        echo "Failed to install dependencies."
        return 1
    fi
    echo "Dependencies installed successfully."

    echo "Running automated application tests..."
    npm run test
    if [[ $? -ne 0 ]]; then
        echo "Automated tests failed. Aborting build."
        return 1
    fi
    echo "Automated tests passed successfully."

    npm run build
    if [[ $? -ne 0 ]]; then
        echo "Failed to build SvelteKit application."
        return 1
    fi
    echo "SvelteKit application built successfully."
    cd ..

    echo
    echo "Building Docker image..."
    docker build -t "$tag_prefix:latest" \
        -t "$tag_prefix:$version" \
        --build-arg "SOURCE=$source" \
        --build-arg "VERSION=$version" \
        -f Dockerfile .
    if [[ $? -ne 0 ]]; then
        echo "Failed to build Docker image."
        return 1
    fi
    echo "Docker image built successfully."

    if [[ "$push" = "true" ]]; then
        echo "Pushing Docker image to GitHub Container Registry..."
        docker push "$tag_prefix:latest" \
            && docker push "$tag_prefix:$version"
        if [[ $? -ne 0 ]]; then
            echo "Failed to push Docker image."
            return 1
        fi
        echo "Docker image pushed successfully."
    fi
}
