source "$(dirname "${BASH_SOURCE[0]}")/utils/environment"
source "$(dirname "${BASH_SOURCE[0]}")/status"

test() {
    usage() {
        echo "Usage:"
        echo "  $0 [options]"
        echo "  $0 [options] <test-path>"
        echo "Options:"
        echo "  --cli               Run command tests"
        echo "  --infra             Run infrastructure tests"
        echo "  --terraform         Run Terraform tests"
        echo "  --filter, -e        Specify regex to filter tests by name"
        echo "  --set-status        Set the commit status of CI/CD pipeline"
        echo "  --force -f          Force test even if a status is already set"
        echo "  --gh-token          Specify the GitHub API token."
        echo "  --ci                Run in non-interactive mode"
        echo "  --dry-run           Perform a dry run without executing tests"
        echo "  --verbose           Enable verbose output"
        echo "  --help, -h          Show this help message"
        echo "Environment Variables:"
        echo "  FOLIO_GH_TOKEN      GitHub API token."
    }

    load_env

    local test_path=""
    local test_filter=""
    local flags=""
    local set_status=false
    local force=false
    local interactive=true
    local dry_run=false
    local verbose=false
    while [[ "$1" != "" ]]; do
        case "$1" in
            --help | -h ) usage; return 0;;
            --cli ) flags+="c";;
            --infra ) flags+="i";;
            --terraform ) flags+="t";;
            --filter | -e ) test_filter="$2"; shift;;
            --set-status ) set_status=true;;
            --force | -f ) force=true;;
            --gh-token ) FOLIO_GH_TOKEN="$2"; shift;;
            --ci ) interactive=false;;
            --dry-run ) dry_run=true;;
            --verbose ) verbose=true;;
            * ) if [[ -z "$test_path" ]]; then test_path="$1"
                else echo "Too many arguments provided: $1"; usage; return 1
                fi;;
        esac
        shift
    done

    if [[ "$verbose" == "true" ]]; then
        echo "Running tests."
        echo "($(fingerprint_env))"
        if [[ "$interactive" == "true" ]]; then
            echo "Running tests in interactive mode."
        else
            echo "Running tests in non-interactive mode."
        fi
        if [[ "$set_status" == "true" ]]; then
            if [[ "$force" == "true" ]]; then
                echo "Force status updates enabled."
            else
                echo "Status updates enabled.";
            fi
        else echo "Status updates disabled."; fi
    fi

    if [[ "$dry_run" == "true" ]]; then return 0; fi

    if ( \
        [[ -n "$test_path" || -n "$test_filter" ]] \
            && [[ "$set_status" == "true" ]] \
    ); then
        echo "Error: Cannot set status when running subset of tests."
        usage
        return 1
    fi

    if [[ "$flags" == *t* ]]; then
        if [[ -n "$test_path" ]] || [[ -n "$test_filter" ]]; then
            echo "Error: Terraform tests cannot be filtered by path or name."
            return 1
        fi
    fi

    if [[ "$set_status" == "true" ]]; then
        if [[ -z "$FOLIO_GH_TOKEN" ]]; then
            echo "GitHub token required to set commit status."
            return 1
        fi

        local status
        status=$(status --self)
        if [[ $? -ne 0 ]]; then
            echo "Failed to retrieve current commit status."
            return 1
        fi

        if [[ "$status" != "none" ]]; then
            echo "Commit already tested: $status."
            if [[ "$force" != "true" ]]; then
                echo "Aborting tests to avoid concurrent runs."
                return 1
            fi
            echo "Forcing tests despite existing status."
        fi
    fi

    update_status() {
        if [[ "$set_status" == "false" ]]; then return 0; fi
        status set --self "$1" --description "Automated tests $2." \
            > /dev/null 2>&1
        if [[ $? -ne 0 ]]; then
            echo "Failed to update commit status: $1."
            return 1
        fi
        echo "Commit status updated to: $1."
    }

    update_status "pending" "started" || return 1

    local os="$(uname -s)"
    local root="$(pwd)"
    if [[ "$os" == "MINGW"* || "$os" == "MSYS"* || "$os" == "CYGWIN"* ]]; then
        root="$(cygpath -w "$root")"
    fi

    if [[ -n "$test_path" ]]; then
        if [[ ! "$test_path" =~ .*bats$ ]] && [[ ! "$test_path" =~ /$ ]]; then
            test_path="$test_path.bats"
        fi
    fi

    local filter_args=()
    if [[ -n "$test_filter" ]]; then
        filter_args=("-f" "$test_filter")
    fi

    local interact=""
    if [[ "$interactive" == "true" ]]; then interact="-it"; fi

    if [[ "$flags" != "t" ]]; then
        echo "Pulling BATS Docker image..."
        local out="$([[ "$verbose" == "true" ]] && echo "/dev/stdout" \
            || echo "/dev/null")"
        docker pull bats/bats:latest > $out || {
            echo "Failed to pull BATS Docker image."
        }
        if [[ $? -ne 0 ]]; then
            echo "Error: Failed to pull BATS Docker image."
            return 1
        fi
        echo "BATS Docker image pulled successfully."
    fi

    failures=$((0))
    if [[ -z "$flags" ]] || [[ "$flags" == *c* ]]; then
        echo
        local path="cli/tests/$test_path"
        if [[ -d "$path" ]] || [[ -f "$path" ]]; then
            echo "Running command line interface BATS tests..."
            docker run $interact --rm \
                --name folio-tests-bats \
                -v "$root:/code" \
                bats/bats:latest \
                "${filter_args[@]}" \
                "$path"
            if [[ $? -eq 0 ]];  then
                echo "Command line interface BATS tests passed successfully."
            else
                echo "Command line interface BATS tests failed."
                failures=$((failures + 1))
            fi
        else
            echo "No command line interface tests found at path: $path"
        fi
    fi

    if [[ -z "$flags" ]] || [[ "$flags" == *i* ]]; then
        echo
        local path="infra/tests/$test_path"
        if [[ -d "$path" ]] || [[ -f "$path" ]]; then
            echo "Running infrastructure BATS tests..."
            docker run $interact --rm \
                --name folio-tests-bats \
                -v "$root:/code" \
                bats/bats:latest \
                "${filter_args[@]}" \
                "$path"
            if [[ $? -eq 0 ]];  then
                echo
                echo "Infrastructure BATS tests passed successfully."
            else
                echo
                echo "Infrastructure BATS tests failed."
                failures=$((failures + 1))
            fi
        else
            echo "No infrastructure tests found at path: $path"
        fi
    fi

    if [[ -z "$flags" ]] || [[ "$flags" == *i* ]] || [[ "$flags" == *t* ]]; then
        if [[ -z "$test_filter" ]] && [[ -z "$test_path" ]]; then
            echo
            echo "Running infrastructure Terraform tests..."
            export TF_DATA_DIR="../.tmp/.terraform"
            terraform -chdir=infra init -backend=false
            if [[ $? -ne 0 ]]; then
                echo "Failed to initialize Terraform."
                failures=$((failures + 1))
            fi
            terraform -chdir=infra test
            if [[ $? -eq 0 ]]; then
                echo
                echo "Terraform tests passed successfully."
            else
                echo
                echo "Terraform tests failed."
                failures=$((failures + 1))
            fi
        fi
    fi

    echo
    if [[ $failures -gt 0 ]]; then
        echo -e "\033[0;31m$failures test suite(s) failed.\033[0m"
        update_status "failure" "failed"
        return 1
    else
        echo "All tests passed successfully."
        update_status "success" "completed successfully" || return 1
    fi
}
