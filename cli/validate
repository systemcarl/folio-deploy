source "$(dirname "${BASH_SOURCE[0]}")/utils/environment"
source "$(dirname ${BASH_SOURCE[0]})/utils/repo"

validate() {
    usage() {
        echo "Usage:"
        echo "  $0 [options]"
        echo "  $0 [options] <ref>"
        echo "Options:"
        echo "  --set-status    Set the commit status of application."
        echo "  --force, -f     Force validation even if status already set."
        echo "  --gh-token      Specify the GitHub API token."
        echo "  --dry-run       Perform a dry run without executing validation"
        echo "  --verbose       Enable verbose output"
        echo "  --help, -h      Show this help message."
        echo "Environment variables:"
        echo "  FOLIO_GH_TOKEN      GitHub API token."
    }

    load_env

    local target=""
    local set_status=false
    local force=false
    local dry_run=false
    local verbose=false
    while [[ "$*" != "" ]]; do
        case $1 in
            --help | -h ) usage; return 0;;
            --set-status ) set_status=true;;
            --force | -f ) force=true;;
            --gh-token ) FOLIO_GH_TOKEN="$2"; shift;;
            --dry-run ) dry_run=true;;
            --verbose ) verbose=true;;
            * ) if [[ -z "$target" ]]; then target="$1";
                else echo "Error: Too many arguments: $1"; return 1; fi;;
        esac
        shift
    done

    if [[ "$verbose" == "true" ]]; then
        echo "Validating application at: $target"
        echo "($(fingerprint_env))"
        if [[ "$set_status" == "true" ]]; then
            if [[ "$force" == "true" ]]; then
                echo "Force status updates enabled."
            else
                echo "Status updates enabled."
            fi
        else echo "Status updates disabled."; fi
    fi

    if [[ "$dry_run" == "true" ]]; then return 0; fi

    if [[ "$set_status" == "true" ]] && [[ -z "$FOLIO_GH_TOKEN" ]]; then
        echo "Error: GitHub token required to set commit status."
        usage
        return 1
    fi

    local wd=""
    local needs_restore=false
    restore() {
        if [[ -z "$wd" ]]; then return 0; fi
        if [[ "$needs_restore" == "false" ]]; then return 0; fi

        echo
        if [[ ! "$wd" =~ /folio$ ]]; then
            echo "Error: Cannot restore outside of 'folio' directory."
            echo "${wd} does not match */folio"
            return 1
        fi
        cd "$wd" || return 1
        git checkout -f -
        if [[ $? -ne 0 ]]; then
            echo "Failed to restore previous state."
            return 1
        fi
        cd ..

        echo
        echo "Application version restored successfully."
    }
    trap restore RETURN
    trap 'return 1' SIGINT

    update_status() {
        if [[ "$set_status" == "false" ]]; then return 0; fi
        status set "$target" "$1" --description "Validation $2."
        if [[ $? -ne 0 ]]; then
            echo "Failed to update commit status."
            return 1
        fi
        echo "Commit status updated to: $1."
    }

    if [[ ! -d folio ]]; then
        echo "Error: 'folio' directory does not exist."
        return 1
    fi
    cd folio || return 1
    wd=$(pwd)

    if [[ -n "$target" ]]; then
        if ! $(compare_refs "$target" HEAD); then
            echo "Already on commit $target."
        else
            echo "Checking out commit $target..."
            needs_restore=true
            git checkout "$target"
            if [[ $? -ne 0 ]]; then
                echo "Failed to checkout $target."
                return 1
            fi
        fi
    fi

    if [[ "$set_status" == "true" ]]; then
        local status=$(status $target)
        if [[ $? -ne 0 ]]; then
            echo "Failed to retrieve commit status."
            return 1
        fi
        if [[ "$status" != "none" ]]; then
            echo "Commit previously validated: $status."
            if [[ "$force" != "true" ]]; then
                echo "Aborting validation to avoid concurrent validations."
                return 1
            fi
            echo "Forcing validation despite existing status."
        fi
    fi

    update_status "pending" "started" || return 1

    npm install
    if [[ $? -ne 0 ]]; then
        echo "Failed to install dependencies."
        update_status "failure" "failed to install dependencies"
        return 1
    fi
    echo "Dependencies installed successfully."

    npm run test
    if [[ $? -ne 0 ]]; then
        echo "Tests failed."
        update_status "failure" "tests failed"
        return 1
    fi
    echo "All tests passed successfully."
    update_status "success" "tests passed" || return 1
    cd ..
}
